[ { "title": "Javascript 기초 정리", "url": "/posts/javascript/", "categories": "JavaScript, Vanilla Javascript", "tags": "javascript, vanilla-javascript", "date": "2021-11-01 20:17:00 +0900", "snippet": "javascript 스크립트 언어 어떠한 애플리케이션에서 코드를 해석하고 실행할 수 있는 엔진이 존재하여 스크립트로 어플리케이션을 제어하기 위한 용도로 사용됨. 인터프리터 언어 코드를 한 줄씩 읽으면서 실행 스크립트 엔진을 가지고 있는 대표적 애플리케이션은 웹 브라우저.Various JavsScript Runtime ECMAScript로 표준화대표적인 Javascript Runtime 환경 Chrome Browser, Node.jsExpression, Stateme..." }, { "title": "210914~21_TIL", "url": "/posts/TIL/", "categories": "TIL, 2021", "tags": "TIL, 2021", "date": "2021-09-14 09:00:00 +0900", "snippet": "TODAY I LEARNED🍒 0914 angular..모듈…rxjs…" }, { "title": "주요 디자인 패턴", "url": "/posts/design-pattern/", "categories": "Oop, Design Pattern", "tags": "Oop, Design Pattern", "date": "2021-08-30 00:37:00 +0900", "snippet": " 디자인 패턴이란?객체지향설계는 재설계 없이 또는 재설계를 최소화하면서 요구사항의 변화를 수용할 수 있도록 만들어 주는데, 이전과 비슷한 상황에서 사용했던 설계를 재사용 하는 경우가 종종 발생한다.이러한 설계는 특정 상황에 맞는 해결책을 빠르게 해결할 수 있도록 도와주는데, 이런 반복적인 설계는 클래스, 객체의 구성, 객체 간 메시지 흐름에서 일정 패턴을 갖는다.[1] 전략 패턴상황에 따른 정책을 정하는 패턴." }, { "title": "210821~27_TIL", "url": "/posts/TIL/", "categories": "TIL, 2021", "tags": "TIL, 2021", "date": "2021-08-21 09:00:00 +0900", "snippet": "TODAY I LEARNED🍒 0821 마와레 마와레 메리고라운드~ 롱베케 존잼!! 운동 시작!해야지..ㅜ🍒 0825 요즘 회사에서 하는 일 관련 회의 열릴떄마다 왕따 당하는 기분ㅜㅜ확실히 고민 해봐야 하는 문제인것 같다. 전 회사 다닐 때도 겁나 어려운 도메인이었지만 이런 고민은 안했는데. 😔🍒 0827 NotNull과 NonNull의 차이! h2 database를 in-memory로 쓸때 테이블이나 데이터베이스가 안 지워져서 계속 오류가 뜬다면 버전때문일수도 있다. 버전을 바꿔볼것. " }, { "title": "[&quot;한달한권&quot;]", "url": "/posts/aiq/", "categories": "한달한권, 수학의쓸모", "tags": "book", "date": "2021-08-15 00:37:00 +0900", "snippet": "how people and machine are smarter togetherbig data - variety - velocity - volume: 하나의 컴퓨터 하드디스크로는 담을 수 없는 큰 양 인공지능 알고리즘이 학습하기 위해서는 충분한 데이터가 필요알고리즘이란 무엇인가? 주어진 문제 해결을 위한 프로세스 또는 규칙의 집합ex) 슈퍼마켓에서 장볼 때 - 무엇을 먼저 살 것인가? - 언제까지 살 것인가? 전략 세우기인공지능 알고리즘 스스로 배우는 인공지능 규칙을 가르치는 대신 데이터를 통해..." }, { "title": "210807~13_TIL", "url": "/posts/TIL/", "categories": "TIL, 2021", "tags": "TIL, 2021", "date": "2021-08-07 09:00:00 +0900", "snippet": "TODAY I LEARNED🍒 0807 딱히 뭘 한건 없는데 TIL 다시 쓰기 시작함. 잔디를 다시 심어 볼까… 아 수학의 쓸모 한달 한권 강의 결제함. 완벽한 그녀에게 딱 한 가지 없는 것 봄. 재밌다…🍒 0810 jpa - attribute converter JPA가 지원하지 않는 타입을 매핑 두 개 이상의 속성을 갖는 밸류 타입을 한 개 칼럼에 매핑 넣으려는 값과 db에 들어가는 값이 다르면 사용..예를 들면 localdatetime 같은 경우 jpa 사용시 binary 타입으로 ..." }, { "title": "SpEL (스프링 Expression Language)", "url": "/posts/springcore9/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "스프링 EL이란? 객체 그래프를 조회하고 조작하는 기능을 제공한다. United EL과 비슷하지만, 메소드 호출을 지원하며 문자열 템플릿 기능도 제공한다. OGNL, MVEL, JBOss EL 등 자바에서 사용할 수 있는 여러 EL이 있지만, SpEL은 모든 스프링 프로젝트 전반에 걸쳐 사용할 EL로 만들었다. 스프링 3.0 부터 지원문법 현재 ‘#’을 쓸 경우 h1함수로 감싸도록 되어있어서 그런 의도가 아닐 시 #를 쓸때는 ‘’ 를 붙여 ‘#’이렇게 표현한다.~~~~ ’#’{“”} ${“”} 표현식은..." }, { "title": "데이터 바인딩 추상화 - Converter와 Formatter", "url": "/posts/springcore8/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "1. Converter데이터 바인딩은 서로 다른 타입 간을 변환하는 작업이다. 프로퍼티 에디터는 오브젝트와 스트링만 바인딩이 가능한 것에 비해, 컨버터는 좀 더 제너럴한 바인딩이 가능한 인터페이스이다. S 타입을 T 타입으로 변환할 수 있는 매우 일반적인 변환기. 상태 정보 없음(Stateless, 쓰레드세이프) ConverterRegistry에 등록하여 사용. 스프링 mvc를 쓴다면(부트 없이), java configuration을 쓴다고 가정하면 1.1 등록 방법@Configurationpub..." }, { "title": "데이터 바인딩 추상화 - PropertyEditor", "url": "/posts/springcore7/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "1) 데이터 바인딩이란? 어떤 프로퍼티에 값을 타겟 객체에 설정하는 기능 사용자가 입력한 값을 애플리케이션 도메인 객체에 동적으로 할당하는 기능 왜 데이터 바인딩이 필요한가? 사용자가 입력하는 값은 주로 문자열인데, 그 문자열을 객체마다 가지고 있는 다양한 프로퍼티 타입(int, date, boolean..혹은 도메인 객체 타입 자체로 변환해야 하는 경우 등)으로 변환하여 넣어주어야 하기 때문이다. 2) org.springframework.validation.DataBinder 오래된 인터페이스 ..." }, { "title": "Resource / Validation", "url": "/posts/springcore6/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "1) Resource 추상화 java.net.URL을 추상화 한 것. org.springframework.core.io.Resource로 java.net.URL을 감싸서 row level에 있는 리소스에 접근하는 기능을 만듬. Resource 자체를 추상화한 것. 스프링 내부에서 많이 사용하는 인터페이스. 추상화한 이유 기존 java.net.URL 기능에 classpath 기준으로 리소스를 읽어오는 기능이 없음 ServletContext 기준으로 상대 경..." }, { "title": "스프링 IoC 컨테이너", "url": "/posts/springcore5/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "ApplicationContext가 상속받고 있는 여러 인터페이스public interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver {//...}MessageSource 국제화(i18n) 기능을 제공하는 인터페이스. getMessage(String code, Object[] ar..." }, { "title": "스프링 IoC 컨테이너", "url": "/posts/springcore4/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "Environment - 프로파일 / 프로퍼티applicationContext가 가지고 있는 기능 중 하나public interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver {//...}public class AppRunner implements ApplicationRunner { ..." }, { "title": "스프링 IoC 컨테이너", "url": "/posts/springcore3/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "@Component와 컴포넌트 스캔1) 컴포넌트 스캔 스프링 3.1부터 도입됨컴포넌트 스캔이란 스프링이 직접 클래스를 검색하여 빈으로 등록해주는 기능이다. 일일히 설정 클래스에 빈을 등록하지 않고도 원하는 클래스를 빈으로 등록할 수 있다.빈을 등록하기 위하여 스캔 위치를 설정할 수 있는데 다음과 같은 설정 방법이 있다. basePackage(String) : 해당 패키지를 기준으로 하위에 있는 클래스 파일들을 스캔한다. 속성 타입인 String이 type-safe 하지 않으므로 basePackageClasses(Class)..." }, { "title": "스프링 IoC 컨테이너", "url": "/posts/springcore2/", "categories": "Spring, Spring Core", "tags": "google analytics, pageviews", "date": "2021-08-07 00:37:00 +0900", "snippet": "1) @Autowired BookService와 BookRepository가 있다고 가정해보자. BookService에 BookRepository의 의존성 주입을 하려면 세 가지 방법이 있다.사용할 수 있는 위치* 생성자(스프링 4.3부터는 생략 가능) - 빈을 만들때도 관여하기 때문에 optional한 설정을 못함* 세터* 필드@Repositorypublic class BookRepository{}@Servicepublic class BookService{ //1. 생성자를 이용하여 의존성 주입 - 빈을 만들때도 관여..." }, { "title": "스프링 IoC 컨테이너", "url": "/posts/springcore1/", "categories": "Spring, Spring Core", "tags": "spring", "date": "2021-08-07 00:37:00 +0900", "snippet": "1) IoC, Bean Factory Inversion of Control 의존 관계 주입(Dependency Injection)이라고도 하며, 어떤 객체가 사용하는 의존 객체를 직접 만들어 사용하는게 아니라, 주입 받아 사용하는 방법을 말함class BookService { BookRepository bookRepository = new BookRepository(); BookService bookService = new BookService(bookRepository); //이런식으로 의존 객체를 직접 ..." }, { "title": "자바의 정석 | chapter7", "url": "/posts/chapter7/", "categories": "Java, Java fundamentals", "tags": "java", "date": "2021-08-07 00:37:00 +0900", "snippet": "" }, { "title": "자바의 정석 | chapter6", "url": "/posts/chapter6/", "categories": "Java, Java fundamentals", "tags": "java", "date": "2021-08-07 00:37:00 +0900", "snippet": "객체지향언어란?단순하게 말하자면 프로그래밍 언어에 ‘객체 지향 개념 규칙’ 이 합쳐진 것이다.이러한 규칙들을 활용하여 코드 간에 서로 관계를 맺어줌으로써 유기적으로 프로그램을 구성할 수 있다.객체 지향 개념을 사용할 경우 다음과 같은 장점이 있다. 새로운 코드를 작성할 때 기존에 있던 코드를 이용하여 쉽게 작성할 수 있다. (재사용성) 코드 간의 관계를 이용하여 적은 노력으로 쉽게 코드를 변경 할 수 있다. (유지보수) 제어자와 메서드를 이용하여 데이터를 보호하고, 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코..." }, { "title": "자바의 정석 | chapter2", "url": "/posts/chapter2/", "categories": "Java, Java fundamentals", "tags": "java", "date": "2021-08-07 00:37:00 +0900", "snippet": "챕터2. 변수1. 변수(Variable)1.1 변수란?값을 저장할 수 있는 메모리상의 공간. 하나의 변수에 단 하나의 값만 저장할 수 있다.1.2 변수의 선언과 초기화 변수 선언 시 메모리의 빈 공간에 ‘변수타입’에 알맞은 크기의 저장 공간이 확보되고, 앞으로 이 저장공간은 ‘변수이름’을 통하여 사용할 수 있게 된다. 변수는 반드시 적절한 값으로 초기화하자. 메모리는 여러 프로그램이 공유하는 자원이므로, ‘알수 없는 값’이 남아있을 수 있기 때문이다. 지역변수는 사용되기 전에 반드시 초기화해야 하지만, 클래스변수와 인스턴..." }, { "title": "자바의 정석 | chapter1", "url": "/posts/chapter1/", "categories": "Java, Java fundamentals", "tags": "java", "date": "2021-08-07 00:37:00 +0900", "snippet": "챕터1. 자바를 시작하기 전에1. 자바(Java Programming Language)1.1 자바란?객체지향 프로그래밍 언어. 풍부한 클래스 라이브러리(Java API)를 통해 프로그래밍에 필요한 요소들을 기본적으로 제공하기 때문에 이 클래스 라이브러리 만을 잘 활용해도 강력한 기능의 자바 프로그램을 작성할 수 있다.1.2 자바언어의 특징 운영체제에 독립적이다. 객체지향언어이다. 배우기 쉽다. 자동 메모리 관리 네트워크와 분산처리 지원 멀티쓰레드 지원 동적 로딩(Dynamic Loading)을 지원운영체제에 독립적..." }, { "title": "css - grid", "url": "/posts/grid/", "categories": "_ETC, Css", "tags": "css", "date": "2021-08-07 00:37:00 +0900", "snippet": ".container { display: grid; /* grid-template-columns: 40% 60%; */ /* grid-template-columns: 4fr 6fr; */ /* grid-template-columns: repeat(3, 1fr); = grid-template-columns: 1fr 1fr 1frs */ grid-template-columns: 200px 1fr; grid-gap: 1rem;}각 item이 높이가 다를시 맞춰주려면...container { dis..." }, { "title": "css - flex", "url": "/posts/flex/", "categories": "_ETC, Css", "tags": "css", "date": "2021-08-07 00:37:00 +0900", "snippet": "FLEX 기본 정리.container { display: flex;}container에 사용하여, 그 안의 자식 item들을 배치, 정렬한다.container에 사용하는 속성Flex-direction row (기본값) column row-reverse column-reverseitem들의 방향을 결정한다.Flex-wrap nowrap (기본값) wrap - container가 줄어들면 item이 뚝 떨어진다. wrap-reverse - 순서가 변경되서 item이 떨어짐container가 item의 폭보다 줄어..." }, { "title": "spring security authentication", "url": "/posts/security_deep01/", "categories": "Spring, Spring Security", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "AuthenticationArchitecture Components(구성 부품)SecurityContextHolder SecurityContextHolder에 만약 값이 존재한다면 현재 인증된 유저로 인식된다. 직접적으로 넣든 어떻게 넣었는지는 중요하지 않다. 기본적으로 쓰레드 로컬에 SecurityContext를 보관한다. 같은 쓰레드라면 언제든 SecurityContext를 사용할 수 있다. 시작 시 쓰레드 로컬에 SecurityContext가 어떻게 저장될지 명시하는 전략을 설정할 수 있다. 독립된 ..." }, { "title": "jwt 토큰 적용 예제", "url": "/posts/security05/", "categories": "Spring, Spring Security", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "Summary지난 포스팅에서는 form based 인증이 어떤 과정으로 이뤄지는지 알아봤다.그런데 내가 구축하고 싶은 것은 TOKEN을 기반으로 한 인증 시스템이다. ✊이 포스팅에서는 JWT TOKEN에 관하여 간략히 설명하고 실제 프로젝트에 적용한 예제를 설명한다.왜 TOKEN으로 인증하는 시스템을 만들어야 할까? 다음과 같은 이유들이 있다.장점 Fast Stateless(무상태성) : 데이터베이스나 세션이 필요없다. 유저가 로그인을 하기 위한 모든 정보는 토큰에 있다. 여러 서비스에서 접근이 가능하다. : 웹앱, IO..." }, { "title": "spring security 내부 인증 과정", "url": "/posts/security04/", "categories": "Spring, Spring Security", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "Summary다음은 스프링 시큐리티의 인증이 완료되는 과정을 나타낸 그림이다.인증과정을 간단하게 설명하자면 사용자로부터 받은 리퀘스트를 Authentication Filter (List) 를 거쳐 인증을 완료 후(1~9) 생성된 Authentication 객체를 SecurityContext에 저장한다.(10)✨ 사용자는 SecurityContext에 저장된 인증정보를 필요할 때마다 꺼내어 사용할 수 있다.AuthenticationFilter 동작 방식클라이언트로 부터 온 HTTP Request는 먼저 ApplicationF..." }, { "title": "spring security란?", "url": "/posts/security03/", "categories": "Spring, Spring Security", "tags": "spring security", "date": "2021-08-06 00:37:00 +0900", "snippet": "1. 스프링 시큐리티란?스프링 시큐리티 레퍼런스에서는 ‘Java EE 기반의 소프트웨어 어플리케이션에 포괄적인 보안 솔루션을 제공하는 프레임워크‘라고 정의하고 있다.특히 스프링 프레임워크를 사용하여 구축된 프로젝트를 지원하는데 중점을 두고 있으며 보안에 대한 체계적이고 다양한 맞춤형 옵션을 제공해준다. 필터 기반으로 동작하며 따라서 MVC와 분리되어 보안을 관리할 수 있다.만약 서버 환경을 전환하는 경우, 일반적으로 새 환경에서 애플리케이션의 보안을 재구성하는데 많은 작업이 필요한데 스프링 시큐리티를 사용하면 이러한 문제가 해..." }, { "title": "spring security configuration", "url": "/posts/security02/", "categories": "Spring, Spring Security", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "1. 의존성 추가스프링 시큐리티 라이브러리를 메이븐에 추가하자.먼저 spring-security-web, spring-security-config 라이브러리를 각 스프링 버전에 맞춰 추가해줘야 한다.(스프링 MVC 프레임워크용이고 스프링 부트는 다른 라이브러리를 추가해줘야 한다)&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring..." }, { "title": "java configuration", "url": "/posts/security01/", "categories": "Spring, Spring Security", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "Introduction토이 프로젝트를 하면서 로그인 기능을 추가해야겠다고 생각했는데, 마침 스프링 기반 프로젝트를 하는 김에 스프링 시큐리티를 공부하며 적용해보았다.확실히 로그인 모듈을 스스로 만들어보면, 프레임워크가 어떻게 동작하는지 잘 알 수 있는 것 같다. 😄이왕 하는 김에 basic auth나 form-based 인증보다는 JWT 토큰 기반의 인증 시스템을 구현해보기로 했다.GOALrest api, ajax 기반의 스프링 MVC 프레임워크에서 스프링 시큐리티 프레임워크를 사용하여 Oauth 2.0방식의 Jwt Token..." }, { "title": "210306~13_TIL", "url": "/posts/TIL/", "categories": "TIL, 2021", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 0306 rxjs에 관하여 학습. 공식 문서를 읽어보았다. pipe와 subscribe가 어떻게 쓰이는지 알게 됨. ‘비동기 이벤트를 컬렉션으로 처리’. 더 학습 필요.. 맥북 초기화하고 다시 깜. 아예 처음부터 설정 다시하니까 좋았다. 도저히 정리 엄두가 안나면 한번씩 초기화하는 것도..나쁘진 않은듯. 블로그 angular로 다시 만들기 시작.🍒 0307 angular 프로젝트에 markdown파서를 적용해봄. 라이브러리만 적용하면 되니까 어렵진 않았다.다만, 라우팅 모듈에서 pa..." }, { "title": "210104~17_TIL", "url": "/posts/TIL/", "categories": "TIL, 2021", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 0105 angular 설치, 데이터 바인딩에 대하여 배움. 객체지향설계, SOLID에 대하여 배움.🍒 0106 augular 데이터 주고받는 법에 대하여 배움. 부모-자식간, 서비스 써서 주고받는 법.🍒 0117 JPA는 객체와 관계형 데이터 베이스 테이블 간의 매핑을 처리하는 ORM 기술의 표준이다. ORM이란 객체와 관계를 설정하는 것이며 특정한 언어에 종속적이지 않다. 이러한 ORM의 개념을 구현하기 위한 표준이 JPA이다. H2는 인메모리 데이터베이스이다. 테스트 코드를 짤..." }, { "title": "201215~23_TIL", "url": "/posts/TIL/", "categories": "TIL, 2020", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 1215 토이프로젝트 블로그 카테고리 기능 넣음. mysql에는 connect by 같은 기능이 없다..셀프 조인해서 해결해야 함. concat_ws로 fullname얻고 그걸로 order by 해야함.🍒 1223 SpEL 강의 듣고 정리함. 스프링 시큐리티의 hasRole, hasPermission 같은 함수들이 StandardEvaluationContext 클래스의 EvaluationContext로부터 온다고 해서 작업한 코드를 살펴보았다.SecurityExpressionRoot 클래스..." }, { "title": "201208~14_TIL", "url": "/posts/TIL/", "categories": "TIL, 2020", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 1208 블로그 css 적용함. 하루종일. 사실 디자인 감각이 제로 수준이라 기존걸 바꾸는건 큰 모험이었지만,어쨌든 지금 레이아웃이 맘에 들기 때문에 매우 만족스럽다.🍒 1209 토이 프로젝트(스터디 로그) 화면 부분 대거 손봄. 거의 내 블로그랑 비슷하지만 다른 점은스터디 로그는 마크다운이 아닌 에디터를 쓴다는 것! 써머노트를 사용하고 있음. 사이트에 대한 권한(role, permission)을 재설정함. 기존엔 단순히 유저와 매니저로 나눴지만게스트, 유저, 매니저로 나눔. 인증이 없어도 ..." }, { "title": "201201~07_TIL", "url": "/posts/TIL/", "categories": "TIL, 2020", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 1201 그런 rest api 로 괜찮은가? 정리 완료. 근데 와중에 이해 안가는 부분 조금 있음. 프로젝트에 적용하면서 알아가면 될 듯. 자바의 정석 챕터 7 정리 시작. 이펙티브 자바 결제함. 아는 건 정말 확실히 알겠는데 모르는건 정말 확실히 모르겠다.. 자바 스프링을 공부할수록 재밌음. 아무래도 지금껏 써온 언어이고 프레임워크이니 그런듯. 벌써 12월이라니 아찔하네..열심히 해서 이 달 말에 회고글 쓸때는 뿌듯한 기분을 느껴야지.🍒 1202 자바의..." }, { "title": "201125~30_TIL", "url": "/posts/TIL/", "categories": "TIL, 2020", "tags": "google analytics, pageviews", "date": "2021-08-06 00:37:00 +0900", "snippet": "TODAY I LEARNED🍒 1125 스프링 코어 라이브러리가 가진 기능 중 Resource 추상화에 대하여 공부했다. 설정파일을 읽어올때 경로를 가져오려고 붙여주던 접두어 “classpath:”. 그냥 당연하게 그렇게 쓰던 것이었는데 ‘다른 방법보다 명시적이기 때문에 그 방법을 쓰는걸 추천한다’는 강사의 말을 듣고선, 정말 이유없이 짜인 코드는 없구나 새삼 알게되었다. 온라인으로 쓸 수 있는 깃북을 사용하다가 좋은 gitbook 형식 블로그 테마를 발견해서 당장 설치했다. 너무 마음에 든다!!..." }, { "title": "Restful API", "url": "/posts/restfulapi/", "categories": "_ETC, Rest API", "tags": "rest api", "date": "2021-08-06 00:37:00 +0900", "snippet": "그런 REST API로 괜찮은가? 라는 강의를 보고 정리한 내용입니다.API란? Application Programming Interface 소프트웨어가 다른 소프트웨어로부터 지정된 형식으로 요청, 명령을 받을 수 있는 수단. 소스코드 수준에서 정의되는 인터페이스. 코드와 코드끼리 서로 소통할 수 있도록 하는 수단 데이터나 서버를 가지고 있는 사람들이 원하는 대로 디자인 할 수 있다Rest api 의 시작web (1991)어떻게 인터넷에서 정보를 공유할 것인가? 정보들을 하이퍼텍스트로 연결한다. 표현 형식: HTM..." } ]
